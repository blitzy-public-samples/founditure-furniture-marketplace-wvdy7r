# Human Tasks:
# 1. Verify Prometheus service endpoint is accessible at prometheus-service:9090
# 2. Review and adjust dashboard refresh intervals based on system load
# 3. Configure alert notification channels in Grafana UI
# 4. Set up user authentication and role-based access control
# 5. Review and adjust retention policies for metrics data

# Addresses requirements from:
# - Section 3.3.4: Infrastructure/Technology Stack - Grafana configuration for metrics visualization
# - Appendix D/System Health Metrics - Dashboard configurations for system health metrics
# - Section 8.1 Deployment Environment - Monitoring configuration for different environments

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  # Grafana datasources configuration
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        version: 1
        editable: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "30s"
          httpMethod: POST
        secureJsonData:
          httpHeaderValue1: "Bearer ${PROMETHEUS_TOKEN}"

  # Grafana dashboard providers configuration
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: Founditure
        folder: ''
        type: file
        disableDeletion: true
        editable: true
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
          foldersFromFilesStructure: true

  # Default system overview dashboard
  default.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Founditure System Overview",
        "tags": ["founditure", "overview"],
        "timezone": "browser",
        "refresh": "1m",
        "schemaVersion": 36,
        "version": 1,
        "panels": [
          {
            "title": "API Response Times",
            "type": "graph",
            "datasource": "Prometheus",
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "targets": [
              {
                "expr": "rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])",
                "legendFormat": "{{handler}}",
                "refId": "A"
              }
            ],
            "yaxes": [
              {
                "format": "s",
                "label": "Response Time"
              }
            ]
          },
          {
            "title": "Service Health",
            "type": "stat",
            "datasource": "Prometheus",
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            },
            "targets": [
              {
                "expr": "up",
                "legendFormat": "{{job}}",
                "refId": "B"
              }
            ],
            "options": {
              "colorMode": "value",
              "graphMode": "area",
              "justifyMode": "auto",
              "textMode": "auto"
            }
          },
          {
            "title": "Resource Usage",
            "type": "gauge",
            "datasource": "Prometheus",
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 0,
              "y": 8
            },
            "targets": [
              {
                "expr": "sum(container_memory_usage_bytes) / sum(container_memory_max_usage_bytes) * 100",
                "refId": "C"
              }
            ],
            "options": {
              "maxValue": 100,
              "minValue": 0,
              "showThresholdLabels": true,
              "showThresholdMarkers": true,
              "thresholds": [
                { "color": "green", "value": null },
                { "color": "yellow", "value": 70 },
                { "color": "red", "value": 85 }
              ]
            }
          },
          {
            "title": "Error Rate",
            "type": "timeseries",
            "datasource": "Prometheus",
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 8,
              "y": 8
            },
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m])) * 100",
                "legendFormat": "Error %",
                "refId": "D"
              }
            ]
          },
          {
            "title": "System Load",
            "type": "timeseries",
            "datasource": "Prometheus",
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 16,
              "y": 8
            },
            "targets": [
              {
                "expr": "node_load1",
                "legendFormat": "Load Average",
                "refId": "E"
              }
            ]
          }
        ]
      }
    }

  # Grafana configuration settings
  grafana.ini: |
    [server]
    root_url = %(protocol)s://%(domain)s/grafana/
    serve_from_sub_path = true

    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    disable_gravatar = true
    cookie_secure = true
    cookie_samesite = strict

    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.anonymous]
    enabled = false

    [dashboards]
    versions_to_keep = 20
    min_refresh_interval = 5s

    [users]
    allow_sign_up = false
    auto_assign_org = true
    auto_assign_org_role = Editor

    [metrics]
    enabled = true
    basic_auth_username = ${METRICS_USERNAME}
    basic_auth_password = ${METRICS_PASSWORD}

    [alerting]
    enabled = true
    execute_alerts = true
    evaluation_timeout_seconds = 30
    notification_timeout_seconds = 30
    max_attempts = 3