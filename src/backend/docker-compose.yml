# Human Tasks:
# 1. Create and configure mosquitto.conf file for MQTT broker
# 2. Set up environment-specific secrets (POSTGRES_PASSWORD, GRAFANA_PASSWORD)
# 3. Configure Prometheus targets in prometheus.yml
# 4. Set up proper volume permissions for data persistence
# 5. Configure resource limits for production deployment

version: '3.8'

# Requirement: Backend Services (3.2.2 Backend Service Architecture)
services:
  # Main backend API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "3000:3000"
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - mosquitto
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - founditure_network

  # AI/ML service for image processing
  # Requirement: AI/ML Infrastructure (1.2 Scope/Core System Components)
  ai:
    build:
      context: .
      dockerfile: ../infrastructure/docker/ai.Dockerfile
    environment:
      - TF_ENABLE_GPU=1
      - MODEL_PATH=/app/models
      - MODEL_VERSION=1.0.0
    ports:
      - "8501:8501"
    volumes:
      - ./models:/app/models
      - ./cache:/app/.cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/v1/models/furniture"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

  # Background worker service
  # Requirement: Background Processing (3.2.2 Backend Components)
  worker:
    build:
      context: .
      dockerfile: ../infrastructure/docker/worker.Dockerfile
    environment:
      - NODE_ENV=development
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - REDIS_URL=redis://redis:6379
      - POINTS_CALCULATION_INTERVAL=60000
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      - redis
      - mosquitto
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

  # Primary database service
  # Requirement: Data Storage (3.3.3 Data Storage)
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=founditure
      - POSTGRES_USER=founditure
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U founditure"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - founditure_network

  # Caching and session store service
  # Requirement: Data Storage (3.3.3 Data Storage)
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - founditure_network

  # Search engine service
  # Requirement: Data Storage (3.3.3 Data Storage)
  elasticsearch:
    image: elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q 'status.*green'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

  # MQTT message broker service
  # Requirement: Message Queue (3.3.2 Backend Technologies)
  mosquitto:
    image: eclipse-mosquitto:2.0
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

  # Metrics collection service
  # Requirement: System Health Metrics (Appendix D)
  prometheus:
    image: prom/prometheus:v2.44.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

  # Monitoring visualization service
  # Requirement: System Health Metrics (Appendix D)
  grafana:
    image: grafana/grafana:9.5.2
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - founditure_network

# Persistent volume configuration
# Requirement: Data Storage (3.3.3 Data Storage)
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_log:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
# Requirement: Network Security (7.3.1)
networks:
  founditure_network:
    driver: bridge
    name: founditure_network